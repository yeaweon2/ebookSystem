<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="co.ebook.prj.bookreview.mapper.BookReviewMapper">
	<!-- 베스트리뷰 전체조회 -->
	<select id="bookReviewList" resultType="co.ebook.prj.bookreview.vo.BookReviewVO">
		<![CDATA[
		SELECT A.RN
		     , A.REVIEW_ID
	         , A.REVIEW_TITLE
	         , A.REVIEW_WRITER 
	         , A.INS_DT
	         , A.REVIEW_LIKEIT
	         , SUBSTR ( B.BOOK_NM, 1 , 12 )  || '....'    AS BOOK_NM
	         , B.BOOK_ID
	         , B.BOOK_COVER
	         , B.BOOK_COVER_PATH 
	      FROM ( SELECT ROW_NUMBER() OVER (ORDER BY REVIEW_LIKEIT DESC ) AS RN
	       	 , R.* FROM REVIEW R ) A , BOOK B
	     WHERE A.BOOK_ID = B.BOOK_ID 
		   AND RN < 4
           AND REVIEW_DEL_YN = 'N'
		]]>
	</select>
	
	<!-- 리뷰 전체조회 -->
	<select id="reviewList" resultType="co.ebook.prj.bookreview.vo.BookReviewVO">
	  SELECT row_number() over (order by REVIEW_LIKEIT DESC) as REVIEW_NO
	 	  	 , REVIEW_ID
           	 , BOOK_ID
          	 , REVIEW_TITLE
             , REVIEW_WRITER
             , REVIEW_HIT
             , REVIEW_LIKEIT
             , REVIEW_REPLY_CNT
             , REVIEW_DEL_YN
             , INS_DT
             , UDT_DT
      FROM REVIEW
       
	</select>
	
	<!-- 리뷰 단건조회 -->
	<select id="reviewSelectList" resultType="co.ebook.prj.bookreview.vo.BookReviewVO">
	  SELECT A.REVIEW_ID
           , A.BOOK_ID
           , A.REVIEW_TITLE
           , A.REVIEW_WRITER
           , A.REVIEW_CONTENTS
           , A.REVIEW_HIT
           , A.REVIEW_LIKEIT
           , A.REVIEW_REPLY_CNT
           , A.REVIEW_DEL_YN
           , A.INS_DT
           , A.UDT_DT
           , B.BOOK_ID
	       , B.BOOK_COVER
	       , B.BOOK_NM
	       , B.BOOK_WRITER 
	       , B.BOOK_COVER_PATH 
        FROM REVIEW A
           , BOOK B
	   WHERE A.BOOK_ID = B.BOOK_ID
	     AND A.REVIEW_ID = #{reviewId}       
	</select>
	
	<!--  대여 리스트 -->
	<select id="reviewLendList" resultType="co.ebook.prj.lend.vo.LendVO" parameterType="co.ebook.prj.lend.vo.LendVO">
	<![CDATA[
	    SELECT L.LEND_ID 
	         , L.BOOK_ID
	         , L.LEND_HIT
	         , L.MEMBER_ID
	         , L.LEND_DATE
	         , B.BOOK_NM
	         , B.BOOK_PUBL_CO 
	         , B.BOOK_WRITER
	         ,  REPLACE ( REPLACE(B.BOOK_INTRO , CHR(13), '') , CHR(10), '<br/>') as book_intro
	         , B.BOOK_COVER
	         , B.BOOK_COVER_PATH 
	         , B.BOOK_FL_CD
	      FROM LEND L
	         , BOOK B
	     WHERE L.BOOK_ID = B.BOOK_ID
	       AND L.MEMBER_ID = #{memberId}
	       AND l.book_id not in  ( select distinct book_id from review r where  review_writer = #{memberId}  )
	 ]]>        
	</select>
	
	<!-- 리뷰 입력 -->
	<insert id="bookReviewInsert" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
		INSERT INTO REVIEW(   
							REVIEW_ID		, BOOK_ID
						  , REVIEW_TITLE	, REVIEW_WRITER
						  , REVIEW_HIT		, REVIEW_REPLY_CNT
						  , REVIEW_ATCH_NM	, REVIEW_ATCH_PATH
						  , INS_DT			, UDT_DT
						  , REVIEW_CONTENTS)
					VALUES(
							BR_SEQ.nextval  , #{bookId}
						  , #{reviewTitle}	, #{reviewWriter}
						  , default			, default			
						  , null			, null			
						  , sysdate			, sysdate	
						  , #{reviewContents})
	</insert>
	
	<!-- 리뷰 수정 -->
	<update id="bookReviewUpdate" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
	UPDATE REVIEW
		 SET REVIEW_TITLE 	= #{reviewTitle} 
		    , REVIEW_CONTENTS 	= #{reviewContents}
		    , UDT_DT = sysdate
    WHERE REVIEW_ID = #{reviewId} 
	</update>
	
	<!--  리뷰 삭제 -->
	<update id="bookReviewDelete" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
	UPDATE REVIEW
   	     SET REVIEW_DEL_YN = 'Y'
		     , UDT_DT = sysdate
	 WHERE REVIEW_ID = #{reviewId}
	</update> 
	
	<!-- 좋아요 증가 -->
	<update id="reviewLikeItUpdate" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
	UPDATE REVIEW
	     SET REVIEW_LIKEIT = REVIEW_LIKEIT + 1 
	 WHERE REVIEW_ID = #{reviewId} 
	</update>
	
	<!-- 조회수 -->
	<update id="reviewHit" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
	 UPDATE REVIEW 
	   	  SET REVIEW_HIT = REVIEW_HIT+1
      WHERE REVIEW_ID = #{reviewId}   
	</update>
	
	<!-- 전체글 카운터 -->
	<select id="getCount" resultType="int">
		SELECT COUNT(*)
  	     FROM REVIEW
 	    WHERE REVIEW_DEL_YN = 'N'
	</select>
	
	<!-- 마일리지넣기 -->
	<update id="memberMile" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
		UPDATE MEMBER
  		   SET MEMBER_MILE = MEMBER_MILE+500
 		 WHERE member_id = #{reviewWriter}
  		   AND exists ( SELECT 1
              			  FROM BUCKET_BOOK 
             			 WHERE MEMBER_ID = #{reviewWriter}
               			   AND BOOK_ID = #{bookId}
 		)
	</update>
	
	<!--  마일리지빼기 -->
	<update id="memberMileDel" parameterType="co.ebook.prj.bookreview.vo.BookReviewVO">
		
	</update>
</mapper>